{
	"info": {
		"_postman_id": "c0c20ae1-68da-4f77-a2b1-0871ee31cb5c",
		"name": "DiSA",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27354467"
	},
	"item": [
		{
			"name": "New User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.message).to.exist;",
							"  pm.expect(responseData.token).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Token is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.token).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Token should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Token is in the correct format\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.token).to.exist.and.to.be.a('string').and.to.match(/^[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]+$/, \"Token is in the correct format\");",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(500);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"test\",\n    \"email\": \"text@example.com\",\n    \"password\": \"testExample\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8000/users/",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8000",
					"path": [
						"users",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Login Normal",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.access_token).to.exist;",
							"  pm.expect(responseData.token_type).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Access token is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.access_token).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Access token should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Token type is a string with a valid value\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.token_type).to.be.a('string');",
							"  pm.expect(responseData.token_type).to.match(/Bearer|JWT|OAuth/);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "jwt",
					"jwt": [
						{
							"key": "secret",
							"value": "78a6d789443db45e595153ec30f5708e47e97313d1273b1414beafc60d6ff05b",
							"type": "string"
						},
						{
							"key": "payload",
							"value": "{\"sub\": \"15491bd7bc724418b2403ae037dd8efb\"\n}",
							"type": "string"
						},
						{
							"key": "algorithm",
							"value": "HS256",
							"type": "string"
						},
						{
							"key": "isSecretBase64Encoded",
							"value": false,
							"type": "boolean"
						},
						{
							"key": "addTokenTo",
							"value": "header",
							"type": "string"
						},
						{
							"key": "headerPrefix",
							"value": "Bearer",
							"type": "string"
						},
						{
							"key": "queryParamKey",
							"value": "token",
							"type": "string"
						},
						{
							"key": "header",
							"value": "{}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "username",
							"value": "test",
							"type": "text"
						},
						{
							"key": "password",
							"value": "testExample",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "127.0.0.1:8000/users/login",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8000",
					"path": [
						"users",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All Collections",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the correct Content-Type header\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Response body is an array\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"});",
							"",
							"",
							"pm.test(\"Response body is empty\", function () {",
							"    pm.expect(pm.response.text()).to.have.lengthOf(0);",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(500);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": []
				},
				"url": {
					"raw": "127.0.0.1:8000/collections",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8000",
					"path": [
						"collections"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "jwt",
		"jwt": [
			{
				"key": "payload",
				"value": "{\"sub\": \"3ec380655bf34cb6bb9df555fd059cfe\"\n}",
				"type": "string"
			},
			{
				"key": "secret",
				"value": "78a6d789443db45e595153ec30f5708e47e97313d1273b1414beafc60d6ff05b",
				"type": "string"
			},
			{
				"key": "algorithm",
				"value": "HS256",
				"type": "string"
			},
			{
				"key": "isSecretBase64Encoded",
				"value": false,
				"type": "boolean"
			},
			{
				"key": "addTokenTo",
				"value": "header",
				"type": "string"
			},
			{
				"key": "headerPrefix",
				"value": "Bearer",
				"type": "string"
			},
			{
				"key": "queryParamKey",
				"value": "token",
				"type": "string"
			},
			{
				"key": "header",
				"value": "{}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}